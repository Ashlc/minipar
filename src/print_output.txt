Beginning parsing...
Parsing an if statement...
Eating token: TokenEnums.RW_IF
New current token: TokenEnums.DL_LPAREN of value (
Eating token: TokenEnums.DL_LPAREN
New current token: TokenEnums.ID of value x
Parsing an expression...
Parsing a term...
Parsing a factor...
Eating token: TokenEnums.ID
New current token: TokenEnums.OP_GT of value >
[parse_factor] Parsed factor: x, creating new node with type: TokenEnums.ID
[parse_term] Returning node with type: (TokenEnums.ID)
[parse_expression] Found a comparison operator: TokenEnums.OP_GT
Eating token: TokenEnums.OP_GT
New current token: TokenEnums.ID of value y
Parsing a term...
Parsing a factor...
Eating token: TokenEnums.ID
New current token: TokenEnums.DL_RPAREN of value )
[parse_factor] Parsed factor: y, creating new node with type: TokenEnums.ID
[parse_term] Returning node with type: (TokenEnums.ID)
[parse_expression] Returning node with type: (TokenEnums.OP_GT)
Eating token: TokenEnums.DL_RPAREN
New current token: TokenEnums.DL_LBRACE of value {
Parsing a block...
Eating token: TokenEnums.DL_LBRACE
New current token: TokenEnums.RW_PRINT of value print
Parsing a print statement...
Eating token: TokenEnums.RW_PRINT
New current token: TokenEnums.DL_LPAREN of value (
Eating token: TokenEnums.DL_LPAREN
New current token: TokenEnums.STRING_LITERAL of value x is greater than y
Parsing an expression...
Parsing a term...
Parsing a factor...
Eating token: TokenEnums.STRING_LITERAL
New current token: TokenEnums.DL_RPAREN of value )
[parse_factor] Parsed factor: x is greater than y, creating new node with type: TokenEnums.STRING_LITERAL
[parse_term] Returning node with type: (TokenEnums.STRING_LITERAL)
[parse_expression] Returning node with type: (TokenEnums.STRING_LITERAL)
Parsed print statement: TokenEnums.STRING_LITERAL, value: x is greater than y
Eating token: TokenEnums.DL_RPAREN
New current token: TokenEnums.DL_SEMICOLON of value ;       
Eating token: TokenEnums.DL_SEMICOLON
New current token: TokenEnums.DL_RBRACE of value }
[parse_print] Returning node with type: (PRINT)
Eating token: TokenEnums.DL_RBRACE
New current token: TokenEnums.RW_ELSE of value else
[parse_block] Returning node with type: (BLOCK)
Eating token: TokenEnums.RW_ELSE
New current token: TokenEnums.DL_LBRACE of value {
Parsing a block...
Eating token: TokenEnums.DL_LBRACE
New current token: TokenEnums.RW_PRINT of value print       
Parsing a print statement...
Eating token: TokenEnums.RW_PRINT
New current token: TokenEnums.DL_LPAREN of value (
Eating token: TokenEnums.DL_LPAREN
New current token: TokenEnums.STRING_LITERAL of value y is greater than x
Parsing an expression...
Parsing a term...
Parsing a factor...
Eating token: TokenEnums.STRING_LITERAL
New current token: TokenEnums.DL_RPAREN of value )
[parse_factor] Parsed factor: y is greater than x, creating new node with type: TokenEnums.STRING_LITERAL
[parse_term] Returning node with type: (TokenEnums.STRING_LITERAL)
[parse_expression] Returning node with type: (TokenEnums.STRING_LITERAL)
Parsed print statement: TokenEnums.STRING_LITERAL, value: y is greater than x
Eating token: TokenEnums.DL_RPAREN
New current token: TokenEnums.DL_SEMICOLON of value ;       
Eating token: TokenEnums.DL_SEMICOLON
New current token: TokenEnums.DL_RBRACE of value }
[parse_print] Returning node with type: (PRINT)
Eating token: TokenEnums.DL_RBRACE
New current token: TokenEnums.EOF of value None
[parse_block] Returning node with type: (BLOCK)
[parse_if_statement] Returning node with type: (IF)
Parsing complete.
TokenEnums.PROGRAM of value --
    TokenEnums.RW_IF of value [<syntax_tree.SyntaxNode object at 0x000001A3907ADED0>, <syntax_tree.SyntaxNode object at 0x000001A3907BC3D0>, <syntax_tree.SyntaxNode object at 0x000001A39081D250>]
Interpreting syntax tree: TokenEnums.PROGRAM
Executing statement: TokenEnums.RW_IF
Executing control flow: TokenEnums.RW_IF
Node value: [<syntax_tree.SyntaxNode object at 0x000001A3907ADED0>, <syntax_tree.SyntaxNode object at 0x000001A3907BC3D0>, <syntax_tree.SyntaxNode object at 0x000001A39081D250>]   
Evaluating expression: TokenEnums.OP_GT
Evaluating expression: TokenEnums.ID
Evaluating expression: TokenEnums.ID
Executing statement: BLOCK
Node type: ('BLOCK', None), TokenEnums.RW_PRINT
Traceback (most recent call last):
Exception: [execute_statement] Unsupported statement node type: TokenEnums.BLOCK